// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/component_information/component_information.proto)

#include <iomanip>

#include "component_information_impl.h"
#include "plugins/component_information/component_information.h"

namespace mavsdk {

using FloatParam = ComponentInformation::FloatParam;
using FloatParamUpdate = ComponentInformation::FloatParamUpdate;

ComponentInformation::ComponentInformation(System& system) :
    PluginBase(),
    _impl{std::make_unique<ComponentInformationImpl>(system)}
{}

ComponentInformation::ComponentInformation(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<ComponentInformationImpl>(system)}
{}

ComponentInformation::~ComponentInformation() {}

std::pair<ComponentInformation::Result, std::vector<ComponentInformation::FloatParam>>
ComponentInformation::access_float_params() const
{
    return _impl->access_float_params();
}

ComponentInformation::FloatParamHandle
ComponentInformation::subscribe_float_param(const FloatParamCallback& callback)
{
    return _impl->subscribe_float_param(callback);
}

void ComponentInformation::unsubscribe_float_param(FloatParamHandle handle)
{
    _impl->unsubscribe_float_param(handle);
}

bool operator==(
    const ComponentInformation::FloatParam& lhs, const ComponentInformation::FloatParam& rhs)
{
    return (rhs.name == lhs.name) && (rhs.short_description == lhs.short_description) &&
           (rhs.long_description == lhs.long_description) && (rhs.unit == lhs.unit) &&
           (rhs.decimal_places == lhs.decimal_places) &&
           ((std::isnan(rhs.start_value) && std::isnan(lhs.start_value)) ||
            rhs.start_value == lhs.start_value) &&
           ((std::isnan(rhs.default_value) && std::isnan(lhs.default_value)) ||
            rhs.default_value == lhs.default_value) &&
           ((std::isnan(rhs.min_value) && std::isnan(lhs.min_value)) ||
            rhs.min_value == lhs.min_value) &&
           ((std::isnan(rhs.max_value) && std::isnan(lhs.max_value)) ||
            rhs.max_value == lhs.max_value);
}

std::ostream& operator<<(std::ostream& str, ComponentInformation::FloatParam const& float_param)
{
    str << std::setprecision(15);
    str << "float_param:" << '\n' << "{\n";
    str << "    name: " << float_param.name << '\n';
    str << "    short_description: " << float_param.short_description << '\n';
    str << "    long_description: " << float_param.long_description << '\n';
    str << "    unit: " << float_param.unit << '\n';
    str << "    decimal_places: " << float_param.decimal_places << '\n';
    str << "    start_value: " << float_param.start_value << '\n';
    str << "    default_value: " << float_param.default_value << '\n';
    str << "    min_value: " << float_param.min_value << '\n';
    str << "    max_value: " << float_param.max_value << '\n';
    str << '}';
    return str;
}

bool operator==(
    const ComponentInformation::FloatParamUpdate& lhs,
    const ComponentInformation::FloatParamUpdate& rhs)
{
    return (rhs.name == lhs.name) &&
           ((std::isnan(rhs.value) && std::isnan(lhs.value)) || rhs.value == lhs.value);
}

std::ostream&
operator<<(std::ostream& str, ComponentInformation::FloatParamUpdate const& float_param_update)
{
    str << std::setprecision(15);
    str << "float_param_update:" << '\n' << "{\n";
    str << "    name: " << float_param_update.name << '\n';
    str << "    value: " << float_param_update.value << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, ComponentInformation::Result const& result)
{
    switch (result) {
        case ComponentInformation::Result::Unknown:
            return str << "Unknown";
        case ComponentInformation::Result::Success:
            return str << "Success";
        case ComponentInformation::Result::NoSystem:
            return str << "No System";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk