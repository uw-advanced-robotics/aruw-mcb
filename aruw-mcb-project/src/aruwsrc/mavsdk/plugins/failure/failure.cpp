// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/failure/failure.proto)

#include <iomanip>

#include "failure_impl.h"
#include "plugins/failure/failure.h"

namespace mavsdk {

Failure::Failure(System& system) : PluginBase(), _impl{std::make_unique<FailureImpl>(system)} {}

Failure::Failure(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<FailureImpl>(system)}
{}

Failure::~Failure() {}

Failure::Result
Failure::inject(FailureUnit failure_unit, FailureType failure_type, int32_t instance) const
{
    return _impl->inject(failure_unit, failure_type, instance);
}

std::ostream& operator<<(std::ostream& str, Failure::Result const& result)
{
    switch (result) {
        case Failure::Result::Unknown:
            return str << "Unknown";
        case Failure::Result::Success:
            return str << "Success";
        case Failure::Result::NoSystem:
            return str << "No System";
        case Failure::Result::ConnectionError:
            return str << "Connection Error";
        case Failure::Result::Unsupported:
            return str << "Unsupported";
        case Failure::Result::Denied:
            return str << "Denied";
        case Failure::Result::Disabled:
            return str << "Disabled";
        case Failure::Result::Timeout:
            return str << "Timeout";
        default:
            return str << "Unknown";
    }
}

std::ostream& operator<<(std::ostream& str, Failure::FailureUnit const& failure_unit)
{
    switch (failure_unit) {
        case Failure::FailureUnit::SensorGyro:
            return str << "Sensor Gyro";
        case Failure::FailureUnit::SensorAccel:
            return str << "Sensor Accel";
        case Failure::FailureUnit::SensorMag:
            return str << "Sensor Mag";
        case Failure::FailureUnit::SensorBaro:
            return str << "Sensor Baro";
        case Failure::FailureUnit::SensorGps:
            return str << "Sensor Gps";
        case Failure::FailureUnit::SensorOpticalFlow:
            return str << "Sensor Optical Flow";
        case Failure::FailureUnit::SensorVio:
            return str << "Sensor Vio";
        case Failure::FailureUnit::SensorDistanceSensor:
            return str << "Sensor Distance Sensor";
        case Failure::FailureUnit::SensorAirspeed:
            return str << "Sensor Airspeed";
        case Failure::FailureUnit::SystemBattery:
            return str << "System Battery";
        case Failure::FailureUnit::SystemMotor:
            return str << "System Motor";
        case Failure::FailureUnit::SystemServo:
            return str << "System Servo";
        case Failure::FailureUnit::SystemAvoidance:
            return str << "System Avoidance";
        case Failure::FailureUnit::SystemRcSignal:
            return str << "System Rc Signal";
        case Failure::FailureUnit::SystemMavlinkSignal:
            return str << "System Mavlink Signal";
        default:
            return str << "Unknown";
    }
}

std::ostream& operator<<(std::ostream& str, Failure::FailureType const& failure_type)
{
    switch (failure_type) {
        case Failure::FailureType::Ok:
            return str << "Ok";
        case Failure::FailureType::Off:
            return str << "Off";
        case Failure::FailureType::Stuck:
            return str << "Stuck";
        case Failure::FailureType::Garbage:
            return str << "Garbage";
        case Failure::FailureType::Wrong:
            return str << "Wrong";
        case Failure::FailureType::Slow:
            return str << "Slow";
        case Failure::FailureType::Delayed:
            return str << "Delayed";
        case Failure::FailureType::Intermittent:
            return str << "Intermittent";
        default:
            return str << "Unknown";
    }
}

} // namespace mavsdk