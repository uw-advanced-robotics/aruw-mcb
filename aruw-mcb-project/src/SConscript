# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruw-mcb.
#
# aruw-mcb is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruw-mcb is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruw-mcb.  If not, see <https://www.gnu.org/licenses/>.

import subprocess
from os.path import abspath
import datetime as dt

Import("env")
Import("args")
Import("sources")


# Don't compile this stuff when testing
IGNORED_FILES_WHILE_TESTING = ["main.cpp", "aruwsrc/robot/**/*_control.cpp", "aruwsrc/sim-initialization/*_sim.cpp"]

ignored_files = []
ignored_dirs = []
def get_output(command):
    return (subprocess.check_output(command).decode('UTF-8')).strip()
try:
    get_user_name = get_output(["git", "config", "user.name"])
except subprocess.CalledProcessError as error:
    get_user_name = "Unknown"
    print(error.output)
try:
    get_sha = get_output(["git", "describe", "--match=''", "--always", "--abbrev=7", "--dirty"])
except subprocess.CalledProcessError as error:
    get_sha = "Unknown"
    print(error.output)
try:
    now = dt.datetime.now()
    get_datetime = f"{now.month:02}-{now.day:02}"
except subprocess.CalledProcessError as error:
    get_datetime = "Unknown"
    print(error.output)
try:
    get_branch_name = get_output(["git", "rev-parse", "--abbrev-ref", "HEAD"])
except subprocess.CalledProcessError as error:
    get_branch_name = "Unknown"
    print(error.output)


if args["TARGET_ENV"] == "tests":
    ignored_files.extend(IGNORED_FILES_WHILE_TESTING)

env_cpy = env.Clone()

# Append on the global robot target build flag
env_cpy.AppendUnique(CCFLAGS=["-D " + args["ROBOT_TYPE"]])
env_cpy.AppendUnique(CCFLAGS=["-D BUILD_USERNAME=" + get_user_name])
env_cpy.AppendUnique(CCFLAGS=["-D BUILD_SHA=" + get_sha])
env_cpy.AppendUnique(CCFLAGS=["-D BUILD_DATETIME=" + get_datetime])
env_cpy.AppendUnique(CCFLAGS=["-D BUILD_BRANCH_NAME=" + get_branch_name])


if args["COMPILE_SRC"]:
    ignored_files.append("main_src_not_compiled.cpp")
    rawSrcs = env_cpy.FindSourceFiles(".", ignorePaths=ignored_dirs, ignoreFiles=ignored_files)
else:
    rawSrcs = []

for source in rawSrcs:
    sources.append(env_cpy.Object(source))

Return('sources')
