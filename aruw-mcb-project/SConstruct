# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruw-mcb.
#
# aruw-mcb is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruw-mcb is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruw-mcb.  If not, see <https://www.gnu.org/licenses/>.

import os

from os.path import join, abspath

from SCons.Script import *

from build_tools import parse_args


# Define project settings and build paths
PROJECT_NAME         = "aruw-mcb"
BUILD_PATH           = "build"
TAPROOT_PATH         = "taproot"
SRC_PATH             = "src"
TEST_PATH            = "test"
TAPROOT_SCRIPTS_TOOLPATH = abspath("../taproot-scripts/scons-tools")


# Parse and validate arguments
args = parse_args.parse_args()


# Define a new SCons environment and set up basic build variables
env = DefaultEnvironment(ENV=os.environ)
env["CONFIG_BUILD_BASE"] = abspath(join(BUILD_PATH, args["TARGET_ENV"], args["ROBOT_TYPE"]))
env["CONFIG_PROJECT_NAME"] = PROJECT_NAME
env["CONFIG_ARTIFACT_PATH"] = join(env["CONFIG_BUILD_BASE"], "artifact")
env["CONFIG_PROFILE"] = args["BUILD_PROFILE"]


env.AppendUnique(CPPPATH=[
    abspath(r"src"),
    abspath(r"test"),
])


sources = []
# Building all libraries (read from sconscript files located in provided dirs)
# Ensure that modm is first, since Taproot depends on modm
# Append include path to environment so both src/test environments have access to them
env.SConscript(dirs=[TAPROOT_PATH, SRC_PATH, TEST_PATH], exports=["env", "args", "sources"])


# Tests must be included as sources (rather than built as a separate library) in order for
# googletest to identify any tests that need to be run. Not an issue for us since we don't
# normally run tests in taproot from this project, but in general this is an issue.
if args["TARGET_ENV"] == "tests":
    sources.extend(env.FindSourceFiles("taproot/test"))


print("Configured {0} parallel build jobs (-j{0}), {1}"
    .format(GetOption("num_jobs"), args["ROBOT_TYPE"]))


if args["COMPILE_SRC"]:
    # Only add aliases when we are compiling source. When we don't add alias, the default
    # build environment will only build the static libraries (modm and Taproot)
    if args["TARGET_ENV"] == "hardware":
        program = env.Program(target=env["CONFIG_PROJECT_NAME"]+".elf", source=sources)

        # The executable depends on the linkerscript
        env.Depends(target=program, dependency=env["LINKERSCRIPT_FILE"])

        # Add target environment-specific SCons aliases
        # WARNING: all aliases must be checked during argument validation
        env.Alias("build", program)
        env.Alias("size", env.Size(program))
        env.Alias("gdb", env.DebugGdbRemote(program))
        env.Alias("run", [env.ProgramOpenOcd(program)])
        env.Alias("all", ["build", "size"])
        env.Default("all")  # For the hardware target env, "all" runs if you don't
                            # specify anything (i.e. just type "scons")
    elif args["TARGET_ENV"] == "tests":
        # Add scons-tools directory to toolpath so we can use the various tools inside it,
        # then add various tools
        env.Append(toolpath=[TAPROOT_SCRIPTS_TOOLPATH])
        env.Tool("run_gcov")

        program = env.Program(target=env["CONFIG_PROJECT_NAME"]+"-tests.elf", source=sources)

        # Add target environment-specific SCons aliases
        # WARNING: all aliases must be checked during argument validation
        env.Alias("build-tests", program)
        env.Alias("run-tests", env.Run(program))
        env.Alias("run-tests-gcov", [env.RunGCOV(program, False, [])])
    else:
        program = env.Program(target=env["CONFIG_PROJECT_NAME"]+".elf", source=sources)

        # Add target environment-specific SCons aliases
        # WARNING: all aliases must be checked during argument validation
        env.Alias("build-sim", program)
        env.Alias("run-sim", env.Run(program))
