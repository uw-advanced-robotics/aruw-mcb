# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruw-mcb.
#
# aruw-mcb is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruw-mcb is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruw-mcb.  If not, see <https://www.gnu.org/licenses/>.

default:
  image: aruw/mcb-2020-gitlab-ci:2021-06-02.1

variables:
  ARTIFACT_PATH: isolated-deploy
  GIT_SUBMODULE_STRATEGY: recursive
  DEFAULT_BUILD_ELF_FILE: build/hardware/release/aruw-mcb.elf
  DEFAULT_TESTS_BUILD_ELF_FILE: build/tests/release/aruw-mcb-tests.elf
  NUM_JOBS: 4

.default_only: &default_only
  - merge_requests
  - master
  - develop
  - schedules

.verification_only: &verification_only
  - merge_requests
  - master
  - develop

.verification_except: &verification_except
  - schedules 
  
stages:
  - Initial Verification
  - Build all Other Targets
  - Deploy Pages

before_script:
  - python -V # Print out python version for debugging

clang-format:
  stage: Initial Verification
  script:
    - python3 /run-clang-format.py --clang-format-executable clang-format-10 -r aruw-mcb-project/src/ aruw-mcb-project/test/
  only: *verification_only
  except: *verification_except

Drone Build:
  stage: Build all Other Targets
  script:
    - cd aruw-mcb-project
    - python3 $(which scons) build robot=TARGET_DRONE -j${NUM_JOBS} additional-ccflags=-Werror
    - python3 $(which scons) size robot=TARGET_DRONE -j${NUM_JOBS} additional-ccflags=-Werror > size.txt
    - python3 ../scripts/parse_metrics.py Drone
    - python3 $(which scons) build-sim robot=TARGET_DRONE -j${NUM_JOBS}
    - python3 $(which scons) build-tests robot=TARGET_DRONE -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all $DEFAULT_TESTS_BUILD_ELF_FILE
    - cp $DEFAULT_BUILD_ELF_FILE ../$ARTIFACT_PATH/aruw-mcb-drone.elf
  only: *default_only
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-drone"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt

Engineer Build:
  stage: Build all Other Targets
  script:
    - cd aruw-mcb-project
    - python3 $(which scons) build robot=TARGET_ENGINEER -j${NUM_JOBS} additional-ccflags=-Werror
    - python3 $(which scons) size robot=TARGET_ENGINEER -j${NUM_JOBS} additional-ccflags=-Werror > size.txt
    - python3 ../scripts/parse_metrics.py Engineer
    - python3 $(which scons) build-sim robot=TARGET_ENGINEER -j${NUM_JOBS}
    - python3 $(which scons) build-tests robot=TARGET_ENGINEER -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all $DEFAULT_TESTS_BUILD_ELF_FILE
    - cp $DEFAULT_BUILD_ELF_FILE ../$ARTIFACT_PATH/aruw-mcb-engineer.elf
  only: *default_only
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-engineer"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt

Hero Build:
  stage: Build all Other Targets
  script:
    - cd aruw-mcb-project
    - python3 $(which scons) build robot=TARGET_HERO -j${NUM_JOBS} additional-ccflags=-Werror
    - python3 $(which scons) size robot=TARGET_HERO -j${NUM_JOBS} additional-ccflags=-Werror > size.txt
    - python3 ../scripts/parse_metrics.py Hero
    - python3 $(which scons) build-sim robot=TARGET_HERO -j${NUM_JOBS}
    - python3 $(which scons) build-tests robot=TARGET_HERO -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all $DEFAULT_TESTS_BUILD_ELF_FILE
    - cp $DEFAULT_BUILD_ELF_FILE ../$ARTIFACT_PATH/aruw-mcb-hero.elf
  only: *default_only
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-hero"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt

Old Soldier Build:
  stage: Build all Other Targets
  script:
    - cd aruw-mcb-project
    - python3 $(which scons) build robot=TARGET_OLD_SOLDIER -j${NUM_JOBS} additional-ccflags=-Werror
    - python3 $(which scons) size robot=TARGET_OLD_SOLDIER -j${NUM_JOBS} additional-ccflags=-Werror > size.txt
    - python3 ../scripts/parse_metrics.py OldSoldier
    - python3 $(which scons) build-sim robot=TARGET_OLD_SOLDIER -j${NUM_JOBS}
    - python3 $(which scons) build-tests robot=TARGET_OLD_SOLDIER -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all $DEFAULT_TESTS_BUILD_ELF_FILE
    - cp $DEFAULT_BUILD_ELF_FILE ../$ARTIFACT_PATH/aruw-mcb-old-soldier.elf
  only: *default_only
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-old_soldier"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt

Soldier Build:
  stage: Initial Verification
  script:
    - cd aruw-mcb-project
    - python3 $(which scons) build robot=TARGET_SOLDIER -j${NUM_JOBS} additional-ccflags=-Werror
    - python3 $(which scons) size robot=TARGET_SOLDIER -j${NUM_JOBS} additional-ccflags=-Werror > size.txt
    - python3 ../scripts/parse_metrics.py Soldier
    - python3 $(which scons) build-sim robot=TARGET_SOLDIER -j${NUM_JOBS}
    - python3 $(which scons) run-tests-gcov robot=TARGET_SOLDIER -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all $DEFAULT_TESTS_BUILD_ELF_FILE
    - cp $DEFAULT_BUILD_ELF_FILE ../$ARTIFACT_PATH/aruw-mcb-soldier.elf
    - cd .. && gcovr -g --xml > cobertura.xml
    - 'sed -i "s=<source>.</source>=<source>./aruw-mcb-project</source>=g" cobertura.xml'
    - 'sed -i "s;filename=\";filename=\"aruw-mcb-project/;g" cobertura.xml'
  only: *default_only
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-soldier"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt
      cobertura: cobertura.xml

Sentinel Build:
  stage: Build all Other Targets
  script:
    - cd aruw-mcb-project
    - python3 $(which scons) build robot=TARGET_SENTINEL -j${NUM_JOBS} additional-ccflags=-Werror
    - python3 $(which scons) size robot=TARGET_SENTINEL -j${NUM_JOBS} additional-ccflags=-Werror > size.txt
    - python3 ../scripts/parse_metrics.py Sentinel
    - python3 $(which scons) build-sim robot=TARGET_SENTINEL -j${NUM_JOBS}
    - python3 $(which scons) build-tests robot=TARGET_SENTINEL -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all $DEFAULT_TESTS_BUILD_ELF_FILE
    - cp $DEFAULT_BUILD_ELF_FILE ../$ARTIFACT_PATH/aruw-mcb-sentinel.elf
  only: *default_only
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-sentinel"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt

Policy Checks:
  stage: Initial Verification
  script:
    - python3 ./scripts/check_singleton_drivers.py ./aruw-mcb-project/src/ 
    - python3 ./scripts/check_license_headers.py
  variables:
    GIT_SUBMODULE_STRATEGY: none
  only: *verification_only
  except: *verification_except

pages:
  image: alpine
  stage: Deploy Pages
  variables:
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - apk update
    - apk add py-pip python3-dev
    - apk add make
    - apk add --no-cache g++ gcc libxml2-dev libxslt-dev
    - pip3 install lxml
    - pip3 install sphinx breathe exhale
    - pip install sphinx_rtd_theme
    - apk add doxygen
  script:
    - cd docs && make html
    - mv _build/html/ ../public/
  artifacts:
    paths:
      - public
  only:
    - develop
  except:
    - schedules
