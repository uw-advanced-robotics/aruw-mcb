# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruw-mcb.
#
# aruw-mcb is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruw-mcb is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruw-mcb.  If not, see <https://www.gnu.org/licenses/>.

default:
  image: aruw/mcb-2020-gitlab-ci:2021-06-02.1

variables:
  ARTIFACT_PATH: isolated-deploy
  GIT_SUBMODULE_STRATEGY: normal
  BUILD_PATH: aruw-mcb-project/build
  NUM_JOBS: 4
  ADDITIONAL_CI_BUILD_ARGS: -j${NUM_JOBS} additional-ccflags=-Werror

.default_only: &default_only
  - merge_requests
  - develop
  - schedules

.default_except: &default_except
  variables:
    - $UPDATE_SUBMODULE

.verification_only: &verification_only
  - merge_requests
  - develop

.verification_except: &verification_except
  - schedules

stages:
  - Quality
  - Build Libraries
  - Tests
  - Build
  - Deploy Pages

before_script:
  - python3 -V # Print out python version for debugging

# Quality

"Clang Format":
  stage: Quality
  script:
    - python3 /run-clang-format.py --clang-format-executable clang-format-10 -r aruw-mcb-project/src/ aruw-mcb-project/test/
  only: *verification_only
  except: *verification_except

"Policy Checks":
  stage: Quality
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - python3 ./taproot-scripts/check_singleton_drivers.py DoNotUse_getDrivers
        -p ./aruw-mcb-project/src/
        -w aruwsrc/drivers_singleton.cpp
            aruwsrc/drivers_singleton.hpp
            aruwsrc/robot/engineer/engineer_control.cpp
            aruwsrc/robot/sentry/sentry_control.cpp
            aruwsrc/robot/standard/standard_control.cpp
            aruwsrc/robot/drone/drone_control.cpp
            aruwsrc/robot/dart/dart_control.cpp
            aruwsrc/robot/hero/hero_control.cpp
            aruwsrc/robot/testbed/testbed_control.cpp
            main.cpp

    - python3 ./taproot-scripts/check_license_headers.py
        -p aruw-mcb
        -i './**/__init__.py' 'taproot/**/*' 'taproot-scripts/**/*' 'aruw-mcb-project/taproot/**/*' 'docs/**/*' 'aruw-mcb-project/robot-type/robot_type.hpp'
        -o 'Advanced Robotics at the University of Washington'

    - python3 ./taproot-scripts/check_header_guard.py aruw-mcb-project/src aruw-mcb-project/test/

    - ./taproot-scripts/check_taproot_submodule.sh ./aruw-mcb-project ./taproot "release develop"
  only: *verification_only
  except: *verification_except

# Hidden jobs to be extended for each robot

.mcb_build:
  stage: Build
  only: *default_only
  except: *default_except
  needs: ["MCB Lib Build"]
  script:
    - cd aruw-mcb-project
    - scons build robot=$ROBOT $ADDITIONAL_CI_BUILD_ARGS
    - scons size robot=$ROBOT $ADDITIONAL_CI_BUILD_ARGS > size.txt
    - python3 ../taproot-scripts/parse_metrics.py -i size.txt -o metrics.txt --identifier $ROBOT
    - cp build/hardware/scons-release/TARGET_$ROBOT/aruw-mcb.elf ../$ARTIFACT_PATH/aruw-mcb-$ROBOT.elf
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-$ROBOT-mcb"
    paths:
      - $ARTIFACT_PATH/*
    expire_in: 2 weeks
    reports:
      metrics: metrics.txt
  cache:
    key: mcb-binaries
    untracked: true

.test_build:
  stage: Tests
  only: *default_only
  except: *default_except
  needs: ["Test Lib Build"]
  script:
    - cd aruw-mcb-project
    - scons build-tests profile=fast robot=$ROBOT -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all build/tests/scons-fast/TARGET_$ROBOT/aruw-mcb-tests.elf
  cache:
    key: test-binaries
    untracked: true

# Generic build, done before other builds which then use shared cache to build faster

"MCB Lib Build":
  stage: Build Libraries
  only: *default_only
  except: *default_except
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - cd aruw-mcb-project
    - scons build robot=STANDARD_SPIDER compile_lib_only=mcb $ADDITIONAL_CI_BUILD_ARGS
  cache:
    untracked: true
    key: mcb-binaries
    paths:
      - $BUILD_PATH

"Test Lib Build":
  stage: Build Libraries
  only: *default_only
  except: *default_except
  needs: []
  script:
    - cd aruw-mcb-project
    - scons build robot=STANDARD_SPIDER compile_lib_only=test profile=fast -j${NUM_JOBS}
  cache:
    paths:
      - $BUILD_PATH

# Standard (Spider) build

"Standard (Spider): MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: STANDARD_SPIDER

# Test build script is different from the others since we use this one to track test coverage for the repo
"Standard (Spider): Test Build":
  stage: Tests
  needs: []
  only: *default_only
  except: *default_except
  script:
    - cd aruw-mcb-project
    - scons run-tests-gcov profile=fast robot=STANDARD_SPIDER -j${NUM_JOBS}
    - valgrind --leak-check=full --error-exitcode=1 --show-leak-kinds=all build/tests/scons-fast/TARGET_STANDARD_SPIDER/aruw-mcb-tests.elf
    - cd .. && gcovr -g --xml > cobertura.xml
    - 'sed -i "s=<source>.</source>=<source>./aruw-mcb-project</source>=g" cobertura.xml'
    - 'sed -i "s;filename=\";filename=\"aruw-mcb-project/;g" cobertura.xml'
  coverage: '/\s+Total:\|(\d+.\d+\%).+\|.+\|.+/'
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-standard-tests"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    expire_in: 2 weeks

# Standard (Orion) build

"Standard (Orion): MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: STANDARD_ORION

"Standard (Orion): Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: STANDARD_ORION

# Standard (Cygnus) build

"Standard (Cygnus): MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: STANDARD_CYGNUS

"Standard (Cygnus): Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: STANDARD_CYGNUS

# Drone build

"Drone: MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: DRONE

"Drone: Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: DRONE

# Engineer build

"Engineer: MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: ENGINEER

"Engineer: Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: ENGINEER

# Hero build

"Hero: MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: HERO_PERSEUS

"Hero: Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: HERO_PERSEUS

# Sentry (Beehive) build

"Sentry: MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: SENTRY_HYDRA

"Sentry: Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: SENTRY_HYDRA

# Dart Build

"Dart: MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: DART

"Dart: Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: DART

# Testbed Build

"Testbed: MCB Build":
  extends:
    - .mcb_build
  variables:
    ROBOT: TESTBED
  
"Testbed: Test Build":
  extends:
    - .test_build
  variables:
    ROBOT: TESTBED

# Pages deploy

"Generate Docs":
  image: alpine
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: none
  stage: Deploy Pages
  before_script:
    - apk update
    - apk add py-pip python3-dev
    - apk add make
    - apk add --no-cache g++ gcc libxml2-dev libxslt-dev
    - python3 -m venv .venv
    - source .venv/bin/activate
    - python3 -m pip install lxml
    - python3 -m pip install sphinx breathe exhale
    - python3 -m pip install sphinx_rtd_theme
    - apk add doxygen
  script:
    - cd docs && make html
    - mv _build/html/ ../public/
  artifacts:
    paths:
      - public
  only:
    - develop
    - merge_requests
  except:
    - schedules
  environment:
    name: "docs preview ${CI_COMMIT_REF_SLUG}"
    url: "https://aruw.gitlab.io/-/controls/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public/index.html"

pages:
  image: alpine
  needs: ["Generate Docs"]
  dependencies: ["Generate Docs"]
  variables:
    GIT_SUBMODULE_STRATEGY: none
  stage: Deploy Pages
  before_script:
    - "true"
  script: "true"
  artifacts:
    paths:
      - public
  only:
    - develop
  except:
    - schedules

"Update Submodule":
  stage: Quality
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - apt-get update -y && apt-get install -yqqf curl openssh-client git unzip sshpass rsync --fix-missing
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_TOOLKIT" | base64 -d | ssh-add - > /dev/null

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config --global user.email "robomstr@uw.edu"
    - git config --global user.name "Gitlab Runner"

    - git remote rm origin
    - git remote add origin git@gitlab.com:aruw/controls/aruw-mcb.git
  script:
    - ./taproot-scripts/update_taproot_submodule.sh ./aruw-mcb-project 20675733 develop
  only:
    variables:
      - $UPDATE_SUBMODULE
