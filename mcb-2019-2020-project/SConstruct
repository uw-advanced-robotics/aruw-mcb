import os
from os.path import join, abspath

# User Configurable Options
project_name = "mcb-2019-2020"
build_path = "build"
hardware_modm_path = "modm/"
sim_modm_path = "sim-modm/modm/"
aruwlib_path = "./src/aruwlib"

# don't compile this stuff
ignored_dirs = [".lbuild_cache", build_path, "robot-type", sim_modm_path, hardware_modm_path, aruwlib_path]
ignored_files = []

if len(COMMAND_LINE_TARGETS) > 1:
    raise Exception("This build script currently supports only one target per invocation.")

build_target = COMMAND_LINE_TARGETS[0]
if build_target in ["build-tests", "run-tests"]:
    target_env = "tests"
else:
    target_env = "hardware"

# SCons environment with all tools
env = DefaultEnvironment(tools=[], ENV=os.environ)
env["CONFIG_BUILD_BASE"] = abspath(join(build_path, target_env))
env["CONFIG_PROJECT_NAME"] = project_name

# Configure build jobs
if GetOption('num_jobs') == 1:
    SetOption('num_jobs', 8)

print("Configured {0} parallel build jobs (-j{0})".format(GetOption('num_jobs')))

modm_path = None
if target_env == "hardware":
    modm_path = hardware_modm_path
    ignored_dirs.append("test/")
else:
    modm_path = sim_modm_path
    ignored_files.append("src/main.cpp")

# Building all libraries (read from sconscript files located in provided dirs)
# Ensure that modm is first, otherwise aruwlib won't have the needed build config
external_scons_libraries = [modm_path, "./src/aruwlib"]
env.SConscript(dirs=external_scons_libraries, exports="env")

# References:
#   GCC flags: https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html
#   Scons API: https://www.scons.org/doc/latest/HTML/scons-user/apa.html
# 
# You can append one or multiple options like this
#     env.Append(CCFLAGS="-pedantic")
#     env.Append(CCFLAGS=["-pedantic", "-pedantic-errors"])
# If you need to remove options, you need to do this:
#     env["CCFLAGS"].remove("-pedantic")
# Note that a lot of options also have a "-no-{option}" option
# that may overwrite previous options.

# Configure build flags that are unique to debug or release profile

profile = ARGUMENTS.get("profile", "release")

if profile == "debug":
    env.Append(CCFLAGS = [
        "-fno-inline",
    ])

env.Append(CPPFLAGS = [
    "-DENV_" + {"hardware": "HARDWARE", "tests": "SIMULATOR"}[target_env]
])

if 'additional-ccflags' in ARGUMENTS:
    env.Append(CCFLAGS = [
       *ARGUMENTS['additional-ccflags'].split(","),
    ])

# add this path so you don't have to write #include "src/..."
env.AppendUnique(CPPPATH=[
    abspath(r"./src"),
    abspath(r"./robot-type")
])

if target_env == "tests":
    env.AppendUnique(CPPPATH=[
    abspath(r"./test")
])

sources = env.FindSourceFiles(".", ignorePaths=ignored_dirs, ignoreFiles=ignored_files)
if target_env == "hardware":
    program = env.Program(target=env["CONFIG_PROJECT_NAME"]+".elf", source=sources)

    # SCons functions
    env.Alias("build", program)
    # The executable depends on the linkerscript
    env.Depends(target=program, dependency=abspath("modm/link/linkerscript.ld"))
    env.Alias("size", env.Size(program))
    env.Alias("gdb", env.OpenOcdGdb(program))

    env.Alias("program", env.OpenOcd(program, commands=["modm_program {$SOURCE}"]))
    env.Alias("all", ["build", "size"])
    env.Default("all")
else:
    program = env.Program(target=env["CONFIG_PROJECT_NAME"]+"-tests.exe", source=sources)
    # WARNING: all test targets must be included in the target_env check earlier in the file
    env.Alias("build-tests", program)
    env.Alias("run-tests", env.Run(program))